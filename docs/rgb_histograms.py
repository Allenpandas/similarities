# -*- coding: utf-8 -*-
"""rgb_histograms.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZKRUlq54Wwt3nQNNrLOd-mb6MGZ2QT8i
"""

# !pip install gdown
#
# !gdown --id 1IQ90jtnITrrcBWsFjF8jkFXF7LAxDqLF

# Commented out IPython magic to ensure Python compatibility.
# %%time
# import zipfile
# zip_ref = zipfile.ZipFile("archive.zip", 'r')
# zip_ref.extractall("./scenery")
# zip_ref.close()

import matplotlib.pyplot as plt
def show_images(images, figsize=(20,10), columns = 5):
  plt.figure(figsize=figsize)
  for i, image in enumerate(images):
      plt.subplot(len(images) / columns + 1, columns, i + 1)
      plt.imshow(image)

import os
IMAGE_PATH="./scenery"
IMAGE_PATH = '../examples/data/'
file_names=os.listdir(IMAGE_PATH)
print(f"number of images: {len(file_names)}")

import numpy as np
import cv2
from PIL import Image
query_image_pillow=Image.open(f'{IMAGE_PATH}/image1.jpeg')
width, height = query_image_pillow.size
print(width, height)
query_image=cv2.imread(f'{IMAGE_PATH}/image2.jpeg')
query_hist_combined=cv2.calcHist([query_image],[0,1,2],None,[16,16,16],[0,256,0,256,0,256])
query_hist_combined = cv2.normalize(query_hist_combined, query_hist_combined).flatten()
print(query_hist_combined.shape)
show_images([np.array(query_image_pillow)])

file_names=os.listdir(IMAGE_PATH)
hists=[]
for file_name in file_names:
  img=cv2.imread(f'{IMAGE_PATH}/{file_name}')
  hist_combined=cv2.calcHist([img],[0,1,2],None,[16,16,16],[0,256,0,256,0,256])
  hist_combined = cv2.normalize(hist_combined, hist_combined).flatten()
  hists.append({"hist":hist_combined,"file_name":file_name})

# Commented out IPython magic to ensure Python compatibility.
# %%time
found_images=[]
for hist in hists:
  similarity=cv2.compareHist(query_hist_combined,hist["hist"],cv2.HISTCMP_INTERSECT)
  found_images.append({"similarity":similarity,"file_name":hist["file_name"]})
found_images.sort(key=lambda item: item["similarity"],reverse=True)
found_images=found_images[:10]

print(found_images)
images_np=[]
found_images_filenames=list(map(lambda el: el["file_name"],found_images))
for image_filename in found_images_filenames:
  images_np.append(np.array(Image.open(f'{IMAGE_PATH}/{image_filename}')))

show_images(np.array(images_np))

from sklearn.neighbors import NearestNeighbors
hists_list=list(map(lambda el: el['hist'],hists))
knn = NearestNeighbors(n_neighbors=10,algorithm='brute',metric='euclidean')
knn.fit(hists_list)

# Commented out IPython magic to ensure Python compatibility.
# %%time
distances,indices= knn.kneighbors([query_hist_combined], return_distance=True)

indices=indices[0]
images_np_knn=[]
for idx in indices:
  images_np_knn.append(np.array(Image.open(f'{IMAGE_PATH}/{file_names[idx]}')))
show_images(np.array(images_np_knn))

# !pip install hnswlib

import hnswlib
dim=4096
index = hnswlib.Index(space='l2', dim=4096)
index.init_index(max_elements=10000, ef_construction=100, M=16)
data = np.array(hists_list)
index.add_items(data)

# Commented out IPython magic to ensure Python compatibility.
# %%time
labels, distances = index.knn_query(query_hist_combined, k = 10)

images_np_hnsw=[]
labels=labels[0]
print(labels)
for idx in labels:
  images_np_hnsw.append(np.array(Image.open(f'{IMAGE_PATH}/{file_names[idx]}')))
show_images(np.array(images_np_hnsw))

query_image_resized=np.array(query_image_pillow.resize((width//19, height//19)))
show_images([np.array(query_image_resized)])
query_image_resized = cv2.cvtColor(query_image_resized, cv2.COLOR_RGB2BGR)
query_hist_resized=cv2.calcHist([query_image_resized],[0,1,2],None,[16,16,16],[0,256,0,256,0,256])
query_hist_resized = cv2.normalize(query_hist_resized, query_hist_resized).flatten()
print(cv2.compareHist(query_hist_combined,query_hist_resized,cv2.HISTCMP_INTERSECT))

query_image_resized_2=np.array(query_image_pillow.resize((width//4, height//23)))
show_images([np.array(query_image_resized_2)])
query_image_resized_2 = cv2.cvtColor(query_image_resized_2, cv2.COLOR_RGB2BGR)
query_hist_resized_2=cv2.calcHist([query_image_resized_2],[0,1,2],None,[16,16,16],[0,256,0,256,0,256])
query_hist_resized_2 = cv2.normalize(query_hist_resized_2, query_hist_resized_2).flatten()
print(cv2.compareHist(query_hist_combined,query_hist_resized_2,cv2.HISTCMP_INTERSECT))

crop_rectangle = (150, 150, 600, 600)
query_image_cropped = np.array(query_image_pillow.crop(crop_rectangle))
show_images([np.array(query_image_cropped)])
query_image_cropped = cv2.cvtColor(query_image_cropped, cv2.COLOR_RGB2BGR)
query_hist_cropped=cv2.calcHist([query_image_cropped],[0,1,2],None,[16,16,16],[0,256,0,256,0,256])
query_hist_cropped = cv2.normalize(query_hist_cropped, query_hist_cropped).flatten()
print(cv2.compareHist(query_hist_combined,query_hist_cropped,cv2.HISTCMP_INTERSECT))

distances,indices= knn.kneighbors([query_hist_cropped], return_distance=True)
indices=indices[0]
images_np_knn=[]
for idx in indices:
  images_np_knn.append(np.array(Image.open(f'{IMAGE_PATH}/{file_names[idx]}')))
show_images(np.array(images_np_knn))