# -*- coding: utf-8 -*-
"""sift.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1leOzG-AQw5MkzgA4qNW5fb3yc-oJ4Lo4
"""

# !pip install opencv-python -U
#
# !pip install gdown
# !gdown --id 1IQ90jtnITrrcBWsFjF8jkFXF7LAxDqLF

# Commented out IPython magic to ensure Python compatibility.
# %%time
# import zipfile
# zip_ref = zipfile.ZipFile("archive.zip", 'r')
# zip_ref.extractall("./scenery")
# zip_ref.close()

import matplotlib.pyplot as plt


def show_images(images, figsize=(20, 10), columns=5):
    plt.figure(figsize=figsize)
    for i, image in enumerate(images):
        plt.subplot(len(images) / columns + 1, columns, i + 1)
        plt.imshow(image)


import os

IMAGE_PATH = "./scenery"
IMAGE_PATH = '../examples/data/'
file_names = os.listdir(IMAGE_PATH)
print(f"number of images: {len(file_names)}")

import cv2
import numpy as np
from PIL import Image
from os import listdir
import pickle as pk
import math
from tqdm import tqdm

sift = cv2.SIFT_create(nfeatures=500)


def resize_img_to_array(img):
    height, width = img.size
    if height * width > 2000 * 2000:
        k = math.sqrt(height * width / (2000 * 2000))
        img = img.resize(
            (round(height / k), round(width / k)),
            Image.ANTIALIAS
        )
    img_array = np.array(img)
    return img_array


def calculate_descr(img):
    eps = 1e-7
    img = resize_img_to_array(img)
    key_points, descriptors = sift.detectAndCompute(img, None)
    if descriptors is None:
        return (None, None)
    descriptors /= (descriptors.sum(axis=1, keepdims=True) + eps)  # RootSift
    descriptors = np.sqrt(descriptors)  # RootSift
    return (key_points, descriptors)


IMAGES_PATH = '../examples/data/'
file_names = listdir(IMAGES_PATH)
all_image_features = []
for file_name in tqdm(file_names):
    img = Image.open(IMAGES_PATH + "/" + file_name)
    keyp, descs = calculate_descr(img)
    if descs is None:
        continue
    if descs.shape[0] == 1:
        continue
    all_image_features.append({"descs": descs, "file_name": file_name})
# pk.dump(all_image_features, open("all_image_features.pkl","wb"))
print('all_image_features:', all_image_features)
import numpy as np
from PIL import Image

query_image_pillow = Image.open(f'{IMAGES_PATH}/image1.jpeg')
query_image_features = calculate_descr(query_image_pillow)[1]
print(query_image_features.shape)

bf = cv2.BFMatcher()


def match_descriptors(IMAGE_SIMILARITIES, filename, matches):
    good_matches = []
    good_matches_sum = 0
    for m, n in matches:
        if m.distance < 0.75 * n.distance:
            good_matches.append(m)
            good_matches_sum += m.distance
    if len(good_matches) < 5:
        return
    bestN = 5
    topBestNSum = 0
    good_matches.sort(key=lambda match: match.distance)
    for match in good_matches[:bestN]:
        topBestNSum += match.distance
    IMAGE_SIMILARITIES.append(
        {"id": filename, "distance": (topBestNSum / bestN) * good_matches_sum / (len(good_matches))})


def sift_reverse_search(image_file):
    IMAGE_SIMILARITIES = []
    _, target_descriptors = calculate_descr(image_file)
    for image in all_image_features:
        matches = bf.knnMatch(target_descriptors, image["descs"], k=2)
        match_descriptors(IMAGE_SIMILARITIES, image["file_name"], matches)
    IMAGE_SIMILARITIES.sort(key=lambda image: image["distance"])
    print('IMAGE_SIMILARITIES', IMAGE_SIMILARITIES[:10])
    return list(map(lambda el: el["id"], IMAGE_SIMILARITIES[:10]))


# Commented out IPython magic to ensure Python compatibility.
# %%time
res = sift_reverse_search(query_image_pillow)
print(res)

found_images = []
for file_name in res:
    found_images.append(np.array(Image.open(IMAGES_PATH + "/" + file_name)))
show_images(np.array(found_images))

crop_rectangle = (100, 100, 400, 400)
query_image_cropped = query_image_pillow.crop(crop_rectangle)
res2 = sift_reverse_search(query_image_cropped)
show_images([np.array(query_image_cropped)])
found_images_2 = []
for file_name in res2:
    found_images_2.append(np.array(Image.open(IMAGES_PATH + "/" + file_name)))
show_images(np.array(found_images_2))
